class: CommandLineTool
cwlVersion: v1.2
id: dp3_prep_target
label: DP3 prep target
doc: |
    Flags requested antennas, flags erroneously
    low amplitudes, applies LINC calibrator and
    target solutions.

baseCommand: DP3

inputs:
    - id: parset
      type: File
      inputBinding:
        position: -1
      doc: DP3 parameter set file.

    - id: msin
      type: Directory
      inputBinding:
        position: 0
        prefix: msin=
        separate: false
      doc: Input data in MeasurementSet format.

    - id: msout_name
      type: string?
      default: "."
      inputBinding:
        position: 0
        prefix: msout=
        separate: false
      doc: |
        The name of the output MeasurementSet.
        Defaults to overwriting the input MeasurementSet.

    - id: solset
      type: File
      doc: |
        The solution tables generated by the LINC target pipeline
        in an HDF5 format.

    - id: collect_flag_statistics_before
      default: true
      type: boolean?
      inputBinding:
        position: 0
        prefix: count1.savetojson=True
      doc: |
        Boolean to determine whether to write flagging
        information of the data to a file in JSON format.

    - id: flag_statistics_filename_before
      type: string?
      default: 'out1.json'
      inputBinding:
        prefix: count1.jsonfilename=
        separate: false
      doc: |
        The filename for the flagging
        information of the initial data.

    - id: collect_flag_statistics_after
      default: true
      type: boolean?
      inputBinding:
        position: 0
        prefix: count2.savetojson=True
      doc: |
        Boolean to determine whether to write flagging
        information of the output data to a file in JSON format.

    - id: flag_statistics_filename_after
      type: string?
      default: 'out2.json'
      inputBinding:
        prefix: count2.jsonfilename=
        separate: false
      doc: |
          The filename for the flagging
          information of the output data.

arguments:
    - applyPA.parmdb=$(inputs.solset.path)
    - applybandpass.parmdb=$(inputs.solset.path)
    - applyclock.parmdb=$(inputs.solset.path)
    - applyRM.parmdb=$(inputs.solset.path)
    - applyphase.parmdb=$(inputs.solset.path)

requirements:
  - class: InlineJavascriptRequirement
  - class: ResourceRequirement
    coresMin: 6

hints:
  - class: DockerRequirement
    dockerPull: vlbi-cwl

outputs:
    - id: logfile
      type: File[]
      outputBinding:
        glob: dp3_prep_target*.log
      doc: |
        The files containing the stdout
        and stderr from the step.

    - id: msout
      doc: Output data in MeasurementSet format.
      type: Directory
      outputBinding:
        glob: '$(inputs.msout_name=="." ? inputs.msin.basename : inputs.msout_name)'

    - id: flag_statistics_before
      type: string
      outputBinding:
        loadContents: true
        glob: $(inputs.flag_statistics_filename_before)
        outputEval: $(JSON.parse(self[0].contents).flagged_fraction_dict)
      doc: |
        The flagging information of the initial data as a parsed JSON string.

    - id: flag_statistics_after
      type: string
      outputBinding:
        loadContents: true
        glob: $(inputs.flag_statistics_filename_after)
        outputEval: $(JSON.parse(self[0].contents).flagged_fraction_dict)
      doc: |
        The flagging information of the output data as a parsed JSON string.

stdout: dp3_prep_target.log
stderr: dp3_prep_target_err.log
